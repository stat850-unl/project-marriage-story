---
format: html
editor: visual
---

```{r, eval = F}
# This code chunk contains code to install all of the dependencies
# necessary to compile and run your report, using if-statements to
# reduce install time for unnecessary code.
# It should be set to eval = F by default, so you aren't installing
# software on someone's computer without their consent.

# This works for packages that are on CRAN
if (!"tidyverse" %in% installed.packages()) {
  install.packages("tidyverse")
}
if (!"remotes" %in% installed.packages()) {
  install.packages("remotes")
}

# This is how to do it for a package that's only on github
if (!"emo" %in% installed.packages()) {
  remotes::install_github("hadley/emo")

```

```{r}

```

## Introduction

The dataset, sourced from [Hollywood age gap site](https://hollywoodagegap.com/), provides information on movies and the age gaps between the love interests portrayed by actors. The variables include movie name, movie release year, director, age difference, number of couples, names and of the actors involved in romance, their birth dates and age, as well as the gender of character they are portraying in the movie. Given its primary focus on significant age differences between actors portraying characters in love, the dataset does not exhibit anomalies. It is designed to highlight and analyze substantial variations in age within the context of romantic relationships depicted in films.

The unique aspect of this dataset is its focus on age gaps in romantic relationships within movies. The dataset is curated based on specific rules, ensuring that the actors portrayed actual love interests, with the youngest being at least 17 years old. Additionally, the dataset excludes animated characters, emphasizing real-life portrayals of romantic relationships in films.

1.  What is the distribution of age differences between love interests in movies?

2.  Are there trends in age differences over the years?

3.  Which directors have the highest average age differences in their movies?

4.  Do trends in the relations between genders change over the year?

## Methods

We utilized the tidyverse package, specifically relaying on the functionalities of the `dplyr` and `lubridate` packages for effective data manipulation. Tidyverse is a comprehensive suite designed to streamline data analysis and visualization workflows. Within this framework, dplyr provides versatile tools for data manipulation tasks.

Our dataset was already organized by the principles of tidy data, which advocates for a standardized organization of datasets. This organizational structure involves arranging variables in columns, observations in rows, and maintaining a singular observational unit in each table. The structured format of our data minimized the need for extensive manipulation.

The `dplyr` package's `mutate` function played a central role in our data manipulation process. This function facilitated the creation and modification of variables within the dataset, enabling the seamless introduction of calculated columns tailored to our analytical needs. Combined with `ymd` function from `lubridate` package, we have successfully ensured the transformation of the birth date variable into a standardized Date type within the dataset. Additionaly, we emplyed `skim` fucntion from `skimr` package to derive a simple overveiw of the data. 

```{r, results = 'hide'}
#| echo: false
dat = read.csv("age_gaps.csv")
library(tidyverse)
library(skimr)

glimpse(dat)

dat %>%
  mutate(actor_1_birthdate = ymd(actor_1_birthdate),
         actor_2_birthdate = ymd(actor_2_birthdate)) -> dat

dat_long <- dat %>%
  gather(key = "actor", value = "age", actor_1_age, actor_2_age)
```


## Topic of Exploration


1.  **Descriptive Statistics:**

    -   Calculate basic statistics such as mean, median, and standard deviation for age and age gap.
```{r}
skimsummary = skim (dat)
summary(dat)
library(ggplot2)

age <- c(dat$actor_1_age, dat$actor_2_age)
age <- as.data.frame(age)
# Create a histogram
ggplot(age, aes(x=age)) +
  geom_histogram(bins=30, position='identity', alpha=0.7, color='black') +
  labs(title='Histogram of Actor Ages', x='Age', y='Frequency') 



```
  
    -   Create histograms or box plots to visualize the distribution of ages and age gaps.

```{r, message=FALSE}
ggplot(dat, aes(x = age_difference)) +
  geom_histogram(binwidth = 5, fill = "skyblue", color = "black", alpha = 0.7) +
  labs(title = "Age Gap Distribution",
       x = "Age Differe",
       y = "Frequency") +
  scale_x_continuous(breaks = seq(0, 55, by = 5))+
  theme_minimal()
```

2.  **Relationship Dynamics:**

    -   Explore the correlation between age and age gap. Are there trends or patterns that suggest certain age differences are more common?

    -   Investigate if there's a relationship between the age of the actors and the duration of their relationships.

3.  **Temporal Analysis:**

    -   Examine if there are trends over time. For example, has there been a change in the average age gap between actors over the years?

    -   Identify if certain age groups are more likely to date each other during specific periods.

4.  **Network Analysis:**

    -   Construct a network graph representing relationships between actors. Analyze the network structure, identifying key actors who are connected to many others.

    -   Explore whether certain actors tend to form relationships with a specific age group.

5.  **Gender Analysis:**

    -   Investigate if there are gender-based differences in age gaps or relationship durations.

    -   Analyze whether there are patterns in the types of movies or genres where age gaps are more prominent based on gender.

6.  **Regression Analysis:**

    -   Build regression models to predict age gap based on various factors such as the age of each actor, movie genre, and movie release year.

7.  **Longitudinal Analysis:**

    -   Examine the changes in the age gap between actors over the course of multiple movies or years.

8 Outline **Detection:**

```         
-   Identify any outliers in the dataset, and explore whether these outliers have common characteristics.
```

Here, you want to introduce the first topic you want to explore with your (newly cleaned up) data. Code to process data should be contained in chunks above this point, and those chunks should *not* be included in the report.

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

If you generate a figure, it should have a caption. Here's a demonstration of how to do that:

```{r iris-plot}
#| label: fig-iris
#| fig-width: 8
#| fig-height: 4 # Change the figure dimensions using fig-width/height
#| out-width: 80% # This changes the size of the figure as rendered in the text. 
#| fig-cap: "This figure shows the relationship between sepal width and petal width in irises. I've used geom_jitter to combat overplotting, as the data are measured in relatively consistent increments. The figure is drawn with `ggplot2` [@ggplot2-package]."
#| echo: false


data(iris)
library(ggplot2)
ggplot(iris, aes(x = Sepal.Width, y = Petal.Width, color = Species)) + 
  geom_jitter() + 
  xlab("Sepal Width (cm)") + ylab("Petal Width (cm)") + 
  ggtitle("Sepal and Petal Dimensions")
```

Then, you can reference @fig-iris in the text and the appropriate cross-reference will be generated.

You can find additional information about formatting figures generated from code in the [quarto documentation](https://quarto.org/docs/authoring/figures.html#computations).

## Additional Exploration topic

Add another topic here... as many as you desire, really. Make sure to include a transition between the two sections that connects the two with some sort of logical train of thought.

## Conclusion

Here, you want to summarize the main points of what you've learned from this investigation, in paragraph form.

## Tips

(delete this section from your report!)

Almost anything you might want to know about how to format output in quarto can be found [here](https://quarto.org/docs/authoring/markdown-basics.html). Feel free to email/come to office hours to figure out how to do XYZ - part of the goal of making you write this report is that I want you to know how to write e.g. a journal paper in Quarto as well, so now's the time to experiment.

If you want to know what the wordcount of your report is, you can run the following command in your terminal:

```         
pandoc --lua-filter wordcount.lua report.qmd
```

Notice that I have not pushed `_output/report.html` or the `_output/report_files/` folder to github - this is intentional. I have actually set `_output` to not show up in git, to encourage you all to NOT push the rendered files to github and to instead work from the markdown files directly.

You may find it cleaner to create a figure subdirectory and store any figures that aren't created by R/Python in that folder. I encourage you to organize this repository in a sensible way.
